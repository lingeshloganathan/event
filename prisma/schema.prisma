// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RecordStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum RoleType {
  ADMIN
  VENDOR
  SUPERVISOR
  ATTENDEE
  STALL_VENDOR
  COORDINATOR
}

enum RegistrationType {
  FREE
  UNLIMITED
  LIMITED
}

enum EventType {
  SINGLE_DAY
  ALL_DAYS
  CUSTOM_DATE
  RECURRING
  FIRST_SATURDAY
  SEASONAL
  ANNUAL
}

enum StallStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ParticipantStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum TicketStatus {
  PENDING
  VALIDATED
  CANCELLED
}

model User {
  id           String        @id @default(uuid())
  phoneNumber  String        @unique
  name         String?
  email        String?       @unique
  gender       Gender?
  role         Role?         @relation(fields: [roleId], references: [id])
  roleId       String?
  events       Event[]
  tickets      Ticket[]
  stalls       Stall[]
  participants Participant[]
  recordStatus RecordStatus  @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Role {
  id           String       @id @default(uuid())
  name         RoleType
  permissions  Permission[]
  users        User[]
  recordStatus RecordStatus @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Permission {
  id           String       @id @default(uuid())
  name         String       @unique
  roles        Role[]
  recordStatus RecordStatus @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Category {
  id            String       @id @default(uuid())
  name          String       @unique
  parentId      String?
  parent        Category?    @relation("CategoryParent", fields: [parentId], references: [id])
  subcategories Category[]   @relation("CategoryParent")
  events        Event[]
  recordStatus  RecordStatus @default(ACTIVE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Event {
  id               String           @id @default(uuid())
  name             String
  description      String
  eventType        EventType
  registrationType RegistrationType
  venueId          String
  venue            Venue            @relation(fields: [venueId], references: [id])
  userId           String
  user             User             @relation(fields: [userId], references: [id])
  tickets          Ticket[]
  stalls           Stall[]
  guests           Guest[]
  participants     Participant[]
  category         Category?        @relation(fields: [categoryId], references: [id])
  categoryId       String?
  recordStatus     RecordStatus     @default(ACTIVE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Venue {
  id           String       @id @default(uuid())
  name         String
  address      String
  events       Event[]
  capacity     Int?
  recordStatus RecordStatus @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Ticket {
  id           String       @id @default(uuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  eventId      String
  event        Event        @relation(fields: [eventId], references: [id])
  qrCode       String
  status       TicketStatus @default(PENDING)
  recordStatus RecordStatus @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Guest {
  id           String       @id @default(uuid())
  name         String
  eventId      String
  event        Event        @relation(fields: [eventId], references: [id])
  recordStatus RecordStatus @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Stall {
  id           String       @id @default(uuid())
  name         String
  eventId      String
  event        Event        @relation(fields: [eventId], references: [id])
  userId       String?
  user         User?        @relation(fields: [userId], references: [id])
  status       StallStatus  @default(PENDING)
  recordStatus RecordStatus @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Participant {
  id        String            @id @default(uuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  eventId   String
  event     Event             @relation(fields: [eventId], references: [id])
  status    ParticipantStatus @default(PENDING)
  createdAt DateTime          @default(now())

  @@unique([userId, eventId])
}
